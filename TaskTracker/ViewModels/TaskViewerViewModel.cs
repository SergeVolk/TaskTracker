using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
//using System.Threading.Tasks;
using System.Windows.Input;

using TaskTracker.Model;
using TaskTracker.Repository;

namespace TaskTracker.ViewModels
{
    public class TaskViewerViewModel : ViewModelBase, IDescriptionProvider, IActivityProvider
    {
        private string summary;
        private string description;
        private string estimation;
        private Status status;
        private string priority;
        private string assignee;
        private string taskType;
        private string project;
        private IRepository repository;
        private IUIService uiService;

        public TaskViewerViewModel(Task task, IUIService uiService)
        {
            this.uiService = uiService;
            repository = new RepositoryFactory().CreateRepository(App.DbConnectionString);

            EditTaskCommand = new Command<object>(OnButtonEditClicked);
            CloseTaskCommand = new Command<object>(OnButtonCloseTaskClicked);
            ChangeProgressCommand = new Command<object>(OnButtonProgressOperationClicked);

            Assign(task);
        }

        public void Assign(Task task)
        {
            this.Id = task.Id;
            this.TaskId = $"{task.Project.ShortName}-{task.Id}";
            this.Project = task.Project.Name;
            this.Summary = task.Summary;
            this.Description = task.Description;
            this.Priority = task.Priority.ToString();
            this.Reporter = task.Creator.Name;
            this.Assignee = task.Assignee.Name;
            this.TaskType = repository.FindTaskType(task.TaskTypeId).Name;
            this.Estimation = task.Estimation?.ToString();
            this.Status = task.Status;
        }     

        public bool AutogeneratedActivities { get; private set; } = false;

        public int Id { get; private set; }
        public string TaskId { get; private set; }
        public string Project
        {
            get { return project; }
            set
            {
                if (project != value)
                {
                    project = value;
                    NotifyPropertyChanged("Project");
                    NotifyPropertyChanged("TaskId");
                }
            }
        }

        public string Summary
        {
            get { return summary; }
            set
            {
                if (summary != value)
                {
                    summary = value;
                    NotifyPropertyChanged("Summary");
                }
            }
        }
        public string Description
        {
            get { return description; }
            set
            {
                if (description != value)
                {
                    description = value;
                    NotifyPropertyChanged("Description");
                }
            }
        }
        public string Priority
        {
            get { return priority; }
            set
            {
                if (priority != value)
                {
                    priority = value;
                    NotifyPropertyChanged("Priority");
                }
            }
        }
        public string Reporter { get; private set; }
        public string Assignee
        {
            get { return assignee; }
            set
            {
                if (assignee != value)
                {
                    assignee = value;
                    NotifyPropertyChanged("Assignee");
                }
            }
        }
        public string TaskType
        {
            get { return taskType; }
            set
            {
                if (taskType != value)
                {
                    taskType = value;
                    NotifyPropertyChanged("TaskType");
                }
            }
        }
        public string Estimation
        {
            get { return estimation; }
            set
            {
                if (estimation != value)
                {
                    estimation = value;
                    NotifyPropertyChanged("Estimation");
                }
            }
        }
        public Status Status
        {
            get { return status; }
            set
            {
                if (status != value)
                {
                    status = value;
                    NotifyPropertyChanged("Status");
                }
            }
        }

        public ICommand EditTaskCommand { get; private set; }

        public ICommand CloseTaskCommand { get; private set; }

        public ICommand ChangeProgressCommand { get; private set; }
        
        private void OnButtonEditClicked(object sender)
        {
            var taskEditorVM = new TaskEditorViewModel()
            {
                Assignees = repository.GetUsers().Select(u => u.Name),
                Projects = repository.GetProjects().Select(p => p.Name),
                Priorities = Enum.GetNames(typeof(Priority)),
                TaskTypes = repository.GetTaskTypes().Select(tt => tt.Name),
                Description = Description,
                Estimation = Estimation,
                Summary = Summary,
                SelectedAssignee = Assignee,
                SelectedProject = Project,
                SelectedPriority = Priority,
                SelectedTaskType = TaskType
            };

            if (uiService.ShowTaskEditorWindow(taskEditorVM).GetValueOrDefault())
            {
                var task = new Task
                {
                    Id = Id,
                    Priority = (Priority)Enum.Parse(typeof(Priority), taskEditorVM.SelectedPriority),
                    Assignee = repository.GetUsers().First(u => u.Name == taskEditorVM.SelectedAssignee),
                    Project = repository.GetProjects().FirstOrDefault(p => p.Name == taskEditorVM.SelectedProject),
                    TaskTypeId = repository.GetTaskTypes().FirstOrDefault(tt => tt.Name == taskEditorVM.SelectedTaskType).Id,
                    Description = taskEditorVM.Description,
                    Estimation = Double.Parse(taskEditorVM.Estimation),
                    Summary = taskEditorVM.Summary
                };
                repository.Update(task);
                Assign(task);
            }
        }

        private void OnButtonCloseTaskClicked(object sender)
        {
            switch (Status)
            {
                case Status.Open:
                case Status.InProgress:
                    SetTaskStatus(Status.Closed);
                    break;
                case Status.Closed:
                    SetTaskStatus(Status.Open);
                    break;
                default:
                    throw new InvalidOperationException();
            }
        }

        private void OnButtonProgressOperationClicked(object sender)
        {
            switch (Status)
            {
                case Status.Open:
                    SetTaskStatus(Status.InProgress);
                    break;
                case Status.InProgress:
                    SetTaskStatus(Status.Open);
                    break;
                default:
                    throw new InvalidOperationException();
            }
        }

        private void SetTaskStatus(Status newStatus)
        {
            if (Status == newStatus)
                throw new InvalidOperationException();
            
            var ttMgr = new TaskTrackerManager(App.DbConnectionString);
            switch (newStatus)
            {
                case Status.Open:
                    if (Status == Status.InProgress)
                    {
                        ttMgr.StopTaskProgress(Id, this);
                    }
                    else
                    {
                        ttMgr.ReopenTask(Id);
                    }
                    break;
                case Status.InProgress:
                    ttMgr.StartTaskProgress(Id);
                    break;
                case Status.Closed:
                    ttMgr.CloseTask(Id, this);
                    break;
                default:
                    throw new InvalidOperationException();
            }

            Status = newStatus;
        }        

        string IDescriptionProvider.GetDescription(Task task)
        {
            string result;
            if ((task.Status != Status.InProgress) ||
               (!uiService.ShowInputDialog(
                    $"The work on the task '{task.Summary}' is being stopped.{Environment.NewLine}Input a comment.",
                    out result).GetValueOrDefault()))
                result = "";

            return result;
        }

        Activity IActivityProvider.GetActivity(Task task)
        {
            return AutogeneratedActivities ?
                new Activity
                {
                    StartTime = DateTime.Now - TimeSpan.FromMinutes(10),
                    EndTime = DateTime.Now,
                    Task = task,
                    User = task.Assignee,
                    Description = $"Task {task.Summary} Autogenerated activity for small task"
                } :
                null;
        }
    }
}
