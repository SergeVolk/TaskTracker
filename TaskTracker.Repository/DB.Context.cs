//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TaskTracker.Repository
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    
    using TaskTracker.Model;
    
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TaskTrackerModelContainer : DbContext
    {
        public TaskTrackerModelContainer()
            : base("name=TaskTrackerModelContainer")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Task> TaskSet { get; set; }
        public virtual DbSet<Activity> ActivitySet { get; set; }
        public virtual DbSet<Project> ProjectSet { get; set; }
        public virtual DbSet<User> UserSet { get; set; }
        public virtual DbSet<TaskType> TaskTypeSet { get; set; }
        public virtual DbSet<Stage> StageSet { get; set; }
    
        public virtual ObjectResult<Task> GetOpenTasksOfUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Task>("GetOpenTasksOfUser", userIdParameter);
        }
    
        public virtual ObjectResult<Task> GetOpenTasksOfUser(Nullable<int> userId, MergeOption mergeOption)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Task>("GetOpenTasksOfUser", mergeOption, userIdParameter);
        }
    
        public virtual ObjectResult<Task> GetOpenTasksOfProject(Nullable<int> projectId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Task>("GetOpenTasksOfProject", projectIdParameter);
        }
    
        public virtual ObjectResult<Task> GetOpenTasksOfProject(Nullable<int> projectId, MergeOption mergeOption)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Task>("GetOpenTasksOfProject", mergeOption, projectIdParameter);
        }
    
        public virtual int SetTaskStatus(Nullable<int> taskId, Nullable<int> newStatus)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("taskId", taskId) :
                new ObjectParameter("taskId", typeof(int));
    
            var newStatusParameter = newStatus.HasValue ?
                new ObjectParameter("newStatus", newStatus) :
                new ObjectParameter("newStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetTaskStatus", taskIdParameter, newStatusParameter);
        }
    
        public virtual ObjectResult<GetStagesWithMaxTasks_Result> GetStagesWithMaxTasks(Nullable<int> stageLimit)
        {
            var stageLimitParameter = stageLimit.HasValue ?
                new ObjectParameter("stageLimit", stageLimit) :
                new ObjectParameter("stageLimit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStagesWithMaxTasks_Result>("GetStagesWithMaxTasks", stageLimitParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetTotalActivitiesTimeOfStage(Nullable<int> stageId)
        {
            var stageIdParameter = stageId.HasValue ?
                new ObjectParameter("stageId", stageId) :
                new ObjectParameter("stageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetTotalActivitiesTimeOfStage", stageIdParameter);
        }
    
        public virtual ObjectResult<GetStagesWithMaxActivities_Result> GetStagesWithMaxActivities(Nullable<int> stageLimit)
        {
            var stageLimitParameter = stageLimit.HasValue ?
                new ObjectParameter("stageLimit", stageLimit) :
                new ObjectParameter("stageLimit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStagesWithMaxActivities_Result>("GetStagesWithMaxActivities", stageLimitParameter);
        }
    }
}
